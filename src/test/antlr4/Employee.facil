test Company {

    getEmployee(String) {
        Manager manager = mock();
        Employee employee = mock(Programmer);
        String foo = "Foo";
        String value = "value";
        Holder holder = getHolder();
        manager.getFormalName(foo, match(employee)) = "Foo";
        manager.getFormalName(foo, match(arg == 1)) = "Foo";
        manager.getFormalName(match(foo).and("bar").or((arg)), any);
        manager.getFormalName(foo, match(arg.getNumber() || 1)) = "Foo";
        manager.getFormalName(foo, match(holder.getObject())) = "Foo";
        manager.getFormalName(foo, match(holder.object)) = "Foo";
        manager.getFormalName(foo, match(arg.getNumber() || value.getLength())) = "Foo";
        manager.getFormalName(foo, match(false)) = "Foo";
        manager.getFormalName(foo, match(false || arg.something(testMethod()))) = "Foo";
        //
        Company company = new Company();
        company.formatName(match(foo).and(bar), any) = "Result";
        company.formatName(match(foo).or(bar), any) = "Result";
        company.formatName(match(foo), any) = "Result";
        company.formatName(match(arg.length() == value.length()),any) = "Result";
        company.formatName(match(arg.length >= value.length),any) = "Result";
        company.formatName(match(value.length >= value.length),any) = "Result";
        company.formatName(match(value.length >= arg.length),any) = "Result";
        company.formatName(match(foo.length == 1)) = "Result";
        company.formatName(match(foo.length != 1)) = "Result";
        company.formatName(match(foo.length != arg.length)) = "Result";
        company.formatName(match(value.length() >= arg.length()),any) =
        company.formatName(match(5 == arg.some() && arg.length == 1), match(arg.length != 2)) = "Result";

        company.<String, String>formatName(match(5 == arg.some() && arg.length == 1).and(arg.someFunction()).or(arg.x() || arg.y())
                        , match(arg.length != 2)) = "Result";

        company.formatName((match(arg.length == arg.length())), match(arg.length != 2)) = "Result";
        company.formatName(("ss"));
        company.formatName(match(arg.equals("Foo") || arg.equals("Bar")), (any)) = "Result";
        comapny.formatName(any);
        company.formatName(match(arg.s == arg.isSomething() && (arg.something || arg.booleanField)) , any) = "bar";
        company.formatName(any, ((any))) = "Foo";
        String bar = "Bar";
        company.formatName(foo, any) = "Foo";
        company.formatName(any, bar) = "Result";
        company.formatName(foo, bar) = true;

        Company<Software> softwareCompany = new Company<>();
        Company<Software> softwareCompany2 = new Company<Software>();
        company.<Company>formatName() = "Foo";
        Company company = new Company();
        Company comp = mock();
        Company comp2 = mock(StartUp);
        Company comp3;
        comp3 = new Company();
        comp3 = mock();
        comp3 = mock(StartUp);

        comp3.getName() = "Foo";

        String foo = "Brian";
        company.methodName() = foo;
        company.name = foo;
    }   //test method

  Employee getEmployee(@PathVariable(name = "named") String named) {    //non test method
        @MyAnnotation(
            value="123",
            name="john",
            age=24,
            newNames={"john", "Doe"}
        ) Employee employeeName ;

        Employee emp = new Employee("john Doe", 24, 70000);

        emp = null;

        int[] numArray = new int[1000];

        for(int i = 0; i < 1000; i++){  //comment
            numArray[i] = i;
        }

        /** local inner class not allowed yet
        class Test {
            public void testSomething(){

            }
        }
        **/
        Employee programmer = new Employee(){

            @Override
            public String getName(){
                return "programmer:" + super.getName();
            }
        };
        if(!programmer instanceof Employee){
            throw new RuntimeException("not an instanceof Employee");
        }
        ArrayList<Employee> employees = new ArrayList<>();
        return programmer;
  }

}